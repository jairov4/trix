#include <wchar.h>

#include <SymbolTable.h>
#include <Ast.h>

COMPILER Trix

  SymbolTable *tab;

  void Err(wchar_t* msg)
  {
    errors->Error(la->line, la->col, msg);
  }

  void InitDeclarations()
  {
    // it must exist
  }

  template<typename T>
  std::shared_ptr<T> ref(T v)
  {
    return std::make_shared<T>(v);
  }

  template<typename T>
  std::shared_ptr<T> ref()
  {
    return std::make_shared<T>();
  }

  template<typename T>
  void add(v<T> col, T val)
  {
    col.push_back(val);
  }

  template<typename T>
  void add_ref(vr<T> col, r<T> val)
  {
    col.push_back(val);
  }

  ast::FQIdentifier GetTupleTypeIdentifier()
  {
    ast::FQIdentifier id;
    id.Identifiers.push_back(string(L"tuple"));
    return id;
  }

  void MakeMap(ast::TypeRef& tgt_val, ast::TypeRef key)
  {
    ast::TypeRef t;
    add(t.Identifier.Identifiers, string(L"map"));
    t.Type = ast::TypeCode::GenericObject;
    add(t.GenericArguments, key);
    add(t.GenericArguments, tgt_val);
    tgt_val = t;
  }

  void MakeList(ast::TypeRef& tgt_val)
  {
    ast::TypeRef t;
    add(t.Identifier.Identifiers, string(L"list"));
    t.Type = ast::TypeCode::GenericObject;
    add(t.GenericArguments, tgt_val);
    tgt_val = t;
  }

/*----------------------------------------------------------------------------*/
CHARACTERS
  tab           = '\u0009'. /*  9 = tabulator */
  lf            = '\u000a'. /* 10 = line feed */
  cr            = '\u000d'. /* 13 = carriage return */

  zero          = '0'.
  binaryDigit   = zero + "1".
  zeroToThree   = zero + "123" .
  octalDigit    = zero + "1234567" .
  nonZeroDigit  = "123456789".
  digit         = '0' + nonZeroDigit .
  hexDigit      = digit + "ABCDEFabcdef" .
  letter        = 'A' .. 'Z' + 'a' .. 'z' + '_'.

  char          = ANY - "'" - '\\' - cr - lf.
  stringChar    = ANY - "\"" - '\\' - cr - lf.

TOKENS
  ident         = letter { letter | digit }.
  /*--------------------------------------------------------------------------*/
  intLit =
  ( [ "+" | "-" ] zero | nonZeroDigit { digit }
  | "0x" hexDigit { hexDigit }
  | "0b" binaryDigit { binaryDigit }
  | "0o" octalDigit { octalDigit }
  ) [ "u" | "U" ] [ "b" | "B" | "s" | "S" | "l" | "L" ].
  /*--------------------------------------------------------------------------*/
  floatLit =
    ["+" | "-"] "." digit {digit}
    [("e" | "E") ["+" | "-"] digit {digit}]
    [ "F" | "f" | "D" | "d" ]
  | ["+" | "-"] digit {digit}
    ( "." {digit}
      [("e" | "E" ) ["+" | "-"] digit {digit} ]
      [ "F" | "f" | "D" | "d" ]
    | ("e" | "E") ["+" | "-"] digit {digit}
      [ "F" | "f" | "D" | "d" ]
    | "F" | "f" | "D" | "d"
    ).
  /*--------------------------------------------------------------------------*/
  charLit =
    "'" ( char
        | "\\" ( "b" | "t" | "n" | "f" | "r" | "\"" | "\'" | "\\"
               | "u" { "u" } hexDigit hexDigit hexDigit hexDigit
               | zeroToThree [ octalDigit ] [ octalDigit ]
               | octalDigit [ octalDigit ]
               )
        )
    "'".
  /*--------------------------------------------------------------------------*/
  stringLit =
    "\"" { stringChar
         | "\\" ( "b" | "t" | "n" | "f" | "r" | "\"" | "\'" | "\\"
                | "u" { "u" } hexDigit hexDigit hexDigit hexDigit
                | zeroToThree [ octalDigit ] [ octalDigit ]
                | octalDigit [ octalDigit ]
                )
         }
    "\"".

  /*----- keyword names needed in LL(1) resolvers ----------------------------*/

  /*----- operators and special characters needed in LL(1) resolvers ---------*/

COMMENTS FROM "/*" TO "*/" NESTED
COMMENTS FROM "//" TO cr lf

IGNORE cr + lf + tab

PRODUCTIONS

/*----------------------------------------------------------------------------*/
Ident<string &name>
=
ident                  (. name = t->val; .)
.
/*----------------------------------------------------------------------------*/
FQIdent<ast::FQIdentifier& id> (.
  id.Identifiers.clear();
.)
=
ident              (. add(id.Identifiers, string(t->val)); .)
{ '.' ident        (. add(id.Identifiers, string(t->val)); .)
}
.
/*----------------------------------------------------------------------------*/
DeclEnum (.
  string name;
.)
=
"enum" Ident<name>
[ '{' Ident<name> { ',' Ident<name> } '}' ]
.
/*----------------------------------------------------------------------------*/
GenericArguments<ast::TypeRef& type>
=
(. ast::TypeRef type2; .)
(. type.Type = ast::TypeCode::GenericObject; .)
'<' TypeRef<type2>
(. add(type.GenericArguments, type2); .)
{
  ',' TypeRef<type2>
  (. add(type.GenericArguments, type2); .)
}
'>'
.
/*----------------------------------------------------------------------------*/
TypeRef<ast::TypeRef& type>
=
( FQIdent<type.Identifier> [ GenericArguments<type> ]
| GenericArguments<type> (. type.Identifier = GetTupleTypeIdentifier(); .)
)
{
  '['
  ( (. ast::TypeRef type2; .) TypeRef<type2> (. MakeMap(type, type2); .)
  | (. MakeList(type); .) )
  ']'
}
.
/*----------------------------------------------------------------------------*/
TypedIdent<ast::TypeRef& type, string& name>
=
TypeRef<type> Ident<name>
.
/*----------------------------------------------------------------------------*/
DeclFunArgs<ast::DeclFunction& fn>
=
(. ast::DeclFunctionArgument arg; .)
[ "this" ]
TypedIdent<arg.Type, arg.Identifier>
(. add(fn.Arguments, arg); .)
{
  ',' TypedIdent<arg.Type, arg.Identifier>
  (. add(fn.Arguments, arg); .)
}
.
/*----------------------------------------------------------------------------*/
InfixOp
= "="
| "||"
| "&&"
| "|"
| "^"
| "&"
| "=="
| "!="
| "<"
| ">"
| "<="
| ">="
| "<<"
| ">>"
| "+"
| "-"
| "*"
| "/"
| "%"
.
/*----------------------------------------------------------------------------*/
PrefixOp
= "!"
| "~"
| "+"
| "-"
.
/*----------------------------------------------------------------------------*/
TermExpr (.
  string name;
.)
=
{ PrefixOp }
( Ident<name>
| '(' Expr ')'
| intLit
| floatLit
| charLit
| stringLit
| "null"
)
{ '[' Expr ']'
| '(' [ Expr { ',' Expr } ] ')'
| '.' Ident<name>
}
.
/*----------------------------------------------------------------------------*/
Expr
=
TermExpr { InfixOp TermExpr }
.
/*----------------------------------------------------------------------------*/
FunBody
=
Expr { ';' Expr }
.
/*----------------------------------------------------------------------------*/
DeclSym<ast::DeclStruct& declStruct, bool isPrivate>
=
(. ast::TypeRef type; string identifier; .)
TypedIdent<type, identifier>
(
  (.
    auto sym = ref<ast::DeclSymbol>();
    sym->IsPrivate = isPrivate;
    sym->Identifier = identifier;
    sym->Type = ast::DeclStructItemTypeCode::Symbol;
    sym->EvalType = type;
    add_ref<ast::ADeclStructItem>(declStruct.Items, sym);
  .)
|
  (. auto fn = ref<ast::DeclFunction>(); .)
  '(' [ DeclFunArgs<*fn> ] ')'
  '{' [ FunBody ] '}'
  (.
    fn->IsPrivate = isPrivate;
    fn->Identifier = identifier;
    fn->Type = ast::DeclStructItemTypeCode::Function;
    fn->EvalType = type;
    add_ref<ast::ADeclStructItem>(declStruct.Items, fn);
  .)
)
.
/*----------------------------------------------------------------------------*/
DeclStructItem<ast::DeclStruct& declStruct> (.
  bool IsPrivate = false;
.)
=
[ "private" (. IsPrivate = true; .) ]
( DeclSym<declStruct, IsPrivate>
| DeclEnum
)
.
/*----------------------------------------------------------------------------*/
DeclStruct<ast::DeclStruct& declStruct> (.
  declStruct.IsPrivate = false;
.)
=
[ "private" (. declStruct.IsPrivate = true; .) ]
"struct" Ident<declStruct.Identifier>
'{' [ DeclStructItem<declStruct> { ';' DeclStructItem<declStruct> } ] '}'
.
/*----------------------------------------------------------------------------*/
DeclNamespace<ast::DeclNamespace& ns>
=
"namespace" FQIdent<ns.Identifier>
'{'
{ (. auto import = ref<ast::DeclNamespaceImport>(); .)
  ImportClause<(*import).Import>
  (. add_ref<ast::ADeclNamespaceItem>(ns.Items, import); .)

| (. auto declStruct = ref<ast::DeclStruct>(); .)
  DeclStruct<*declStruct>
  (. add_ref<ast::ADeclNamespaceItem>(ns.Items, declStruct); .)

| (. auto nsChild = ref<ast::DeclNamespaceNamespace>(); .)
  DeclNamespace<(*nsChild).Namespace>
  (. add_ref<ast::ADeclNamespaceItem>(ns.Items, nsChild); .)
}
'}'
.
/*----------------------------------------------------------------------------*/
ImportClause<ast::ImportClause& importClause> (.
  string id;
.)
=
( "from" FQIdent<importClause.Namespace> "import" Ident<id> ';'
| "import" FQIdent<importClause.Resource> ';'
)
.
/*----------------------------------------------------------------------------*/
Trix (.
  InitDeclarations();
.)
=
{ (. ast::ImportClause import; .)
  ImportClause<import>
| (. ast::DeclNamespace nsChild; .)
  DeclNamespace<nsChild>
}
.
/*----------------------------------------------------------------------------*/

END Trix.
